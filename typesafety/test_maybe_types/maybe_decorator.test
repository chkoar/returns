[CASE maybe_decorator_no_params]
[disable_cache]
from returns.maybe import maybe

@maybe
def test() -> int:
    return 1

reveal_type(test)  # E: Revealed type is 'def () -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_decorator_no_params_optional]
[disable_cache]
from typing import Optional
from returns.maybe import maybe

@maybe
def test() -> Optional[int]:
    return 1

reveal_type(test)  # E: Revealed type is 'def () -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_composition_no_params]
[disable_cache]
from returns.maybe import maybe

def test() -> int:
    return 1

reveal_type(maybe(test))  # E: Revealed type is 'def () -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_decorator_with_args]
[disable_cache]
from returns.maybe import maybe

@maybe
def test(first: int, second: str = None, *, kw: bool = True) -> int:
    return 1

reveal_type(test)  # E: Revealed type is 'def (first: builtins.int, second: Union[builtins.str, None] =, *, kw: builtins.bool =) -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_composition_with_args]
[disable_cache]
from returns.maybe import maybe

def test(first: int, second: str = None, *, kw: bool = True) -> int:
    return 1

reveal_type(maybe(test))  # E: Revealed type is 'def (first: builtins.int, second: Union[builtins.str, None] =, *, kw: builtins.bool =) -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_decorator_with_args_kwargs]
[disable_cache]
from returns.maybe import maybe

@maybe
def test(*args, **kwargs) -> int:
    return 1

reveal_type(test)  # E: Revealed type is 'def (*args: Any, **kwargs: Any) -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_decorator_with_typed_args_kwargs]
[disable_cache]
from returns.maybe import maybe

@maybe
def test(*args: int, **kwargs: str) -> int:
    return 1

reveal_type(test)  # E: Revealed type is 'def (*args: builtins.int, **kwargs: builtins.str) -> returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_decorator_with_optional]
[disable_cache]
from typing import Optional
from returns.maybe import maybe

@maybe
def test() -> Optional[int]:
    return 1

reveal_type(test)  # E: Revealed type is 'def () -> returns.maybe.Maybe[builtins.int*]'
[/CASE]
