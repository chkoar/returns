[CASE maybe_type_regular]
[disable_cache]
from returns.maybe import Maybe

value: int
reveal_type(Maybe.new(value))  # E: Revealed type is 'returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_type_optional]
[disable_cache]
from typing import Optional
from returns.maybe import Maybe

value: Optional[int]
reveal_type(Maybe.new(value))  # E: Revealed type is 'returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_map_regular]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new(1).map(lambda i: i / i)
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.float*]'
[/CASE]


[CASE maybe_map_optional]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new({'a': 'b'}).map(lambda d: d.get('a', None))
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
[/CASE]


[CASE maybe_bind_regular]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new(1).bind(lambda d: Maybe.new(str(d)))
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
[/CASE]


[CASE maybe_bind_optional]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new({'a': 'b'}).bind(lambda d: Maybe.new(d.get('a', None)))
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
[/CASE]


[CASE maybe_fix_regular]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new({'a': 'b'}).fix(lambda: 'b')
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
[/CASE]


[CASE maybe_fix_optional]
[disable_cache]
from typing import Optional
from returns.maybe import Maybe

value: Optional[int]
result = Maybe.new({'a': 'b'}).fix(lambda: value)
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.int*]'
[/CASE]


[CASE maybe_rescue_regular]
[disable_cache]
from returns.maybe import Maybe

result = Maybe.new({'a': 'b'}).rescue(lambda: Maybe.new('b'))
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.str*]'
[/CASE]


[CASE maybe_rescue_optional]
[disable_cache]
from typing import Optional
from returns.maybe import Maybe

value: Optional[int]
result = Maybe.new({'a': 'b'}).rescue(lambda: Maybe.new(value))
reveal_type(result)  # E: Revealed type is 'returns.maybe.Maybe[builtins.int*]'
[/CASE]
